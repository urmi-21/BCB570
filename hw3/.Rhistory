install.packages("igraph")
library("igraph")
5stargraph <- graph(combn(1:5, 2), directed = FALSE)
plot.igraph(completegraph)
#HW2
library("igraph")
5stargraph <- graph(combn(1:5, 2), directed = FALSE)
plot.igraph(5stargraph)
#HW2
library("igraph")
5stargraph <- graph(combn(1:5, 2), directed = FALSE)
fivestargraph <- graph(combn(1:5, 2), directed = FALSE)
plot.igraph(fivestargraph)
install.packages("rmarkdown")
Sys.which("pdflatex")
#Sol 6:
To check whether these graphs follow the power law distribution we have to check the degree distribution of the graphs and then try to fit them to a power law distribution. We can do this in following steps:
i) First we should get the degree distribution of the graph and plot it on log scale i.e. logk vs log(p(k)) and compare it to a standard power law distribution, as shown in Fig 2d. If our network follows is power law distribution we should see a straight line with negative slope. In figure 2 we see that our graphA and C's distribution is closer to powerlaw. However this method is just for visual inspection. Thus, We use the function *power.law.fit* from igraph package to fit the degree distribution to power law and get statistical p-values to evaluate the fit.
ii) If the degree distribution follows power law we will have $$P(k) \sim k^{-\alpha}$$. *power.law.fit* function reports the parameter of the fitted power law distribution and also reports a p-value. P-value below a confidence level means network is not from a power law distribution, whereas higher p-values indicate in favor of the null i.e. network's degree distribution follows a power law.
Table 6 shows the results obtained from applying *power.law.fit* function to the graphs. The xmin parameter was evaluated by power.law.fit function such that the p-value for Kolmogorov-Smirnov test is largest. From the table we can see that the p-values for all three graphs are greater than 0.05 therefore we fail to reject the null hypothesis at 95% significance. Thus, the given networks follow power law distribution.
setwd("D:/courses/sem4/bcb570/hw/hw3")
load("D:/courses/sem4/bcb570/hw/hw3/.RData")
CCSB_YI1_lcc_mcl$K
findlargestcluster<-function(mcldata){
res<-0
t<-mcldata$K
for(i in c(0:t))
print (i)
}
findlargestcluster(CCSB_YI1_lcc_mcl)
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-c()
t<-mcldata$K
for(i in c(0:t))
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
return(i)
}
print (findlargestcluster(CCSB_YI1_lcc_mcl))
print (findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl))
library("igraph")
library(readxl)
setwd("D:/courses/sem4/bcb570/hw/hw3")
#find largest clusters in Y2h components
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-c()
t<-mcldata$K
for(i in c(0:t))
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
return(i)
}
print (findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl))
V(graph_CCSB_YI1_lcc)[ which(CCSB_YI1_lcc_mcl$Cluster %in% c(232))]$name
V(graph_CCSB_YI1_lcc)[ which(CCSB_YI1_lcc_mcl$Cluster %in% c(23))]$name
cres<-c()
length(cres)
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
return(i)
}
print (findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl))
V(graph_CCSB_YI1_lcc)[ which(CCSB_YI1_lcc_mcl$Cluster %in% c(23))]$name
V(graph_Y2H_uni_lcc)[ which(Y2H_uni_lcc_mcl$Cluster %in% c(21))]
length(V(graph_Y2H_uni_lcc)[ which(Y2H_uni_lcc_mcl$Cluster %in% c(21))])
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]
print (length(thiscluster))
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
return(i)
}
print (findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl))
#length(V(graph_Y2H_uni_lcc)[ which(Y2H_uni_lcc_mcl$Cluster %in% c(21))])
print (findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl))
V(graph_CCSB_YI1_lcc)[ which(CCSB_YI1_lcc_mcl$Cluster %in% c(23))]$name
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
print (i)
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]
print (length(thiscluster))
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
return(i)
}
print (findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl))
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
#print (i)
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]
print (length(thiscluster))
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
return(i)
}
print (findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl))
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
print (i)
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]
#print (length(thiscluster))
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
return(res)
}
print (findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl))
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
#print (i)
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]
#print (length(thiscluster))
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
return(res)
}
print (findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl))
V(graph_CCSB_YI1_lcc)[ which(CCSB_YI1_lcc_mcl$Cluster %in% c(23))]$name
V(graph_CCSB_YI1_lcc)[ which(CCSB_YI1_lcc_mcl$Cluster %in% c(0))]$name
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
#print (i)
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]
#print (length(thiscluster))
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
return(cres)
}
print (findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl))
lc_Y2H_uni_lcc_mcl<-findlargestcluster(graph_Y2H_uni_lcc,Y2H_uni_lcc_mcl)
lc_Y2H_uni_lcc_mcl_10<-findlargestcluster(graph_Y2H_uni_lcc_10,Y2H_uni_lcc_mcl_10)
lc_Y2H_uni_lcc_mcl_25<-findlargestcluster(graph_Y2H_uni_lcc_25,Y2H_uni_lcc_mcl_25)
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
#print (i)
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]$name
#print (length(thiscluster))
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
return(cres)
}
lc_Y2H_uni_lcc_mcl<-findlargestcluster(graph_Y2H_uni_lcc,Y2H_uni_lcc_mcl)
lc_Y2H_uni_lcc_mcl_10<-findlargestcluster(graph_Y2H_uni_lcc_10,Y2H_uni_lcc_mcl_10)
lc_Y2H_uni_lcc_mcl_25<-findlargestcluster(graph_Y2H_uni_lcc_25,Y2H_uni_lcc_mcl_25)
lc_Y2H_uni_lcc_mcl_25
lc_Y2H_uni_lcc_mcl_10
lc_Y2H_uni_lcc_mcl
intersection(lc_Y2H_uni_lcc_mcl,lc_Y2H_uni_lcc_mcl_10,lc_Y2H_uni_lcc_mcl_25)
lc_CCSB_YI1_lcc_mcl<-findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl)
lc_CCSB_YI1_lcc_mcl_10<-findlargestcluster(graph_CCSB_YI1_lcc_10,CCSB_YI1_lcc_mcl_10)
lc_CCSB_YI1_lcc_mcl_25<-findlargestcluster(graph_CCSB_YI1_lcc_25,CCSB_YI1_lcc_mcl_25)
intersection(lc_CCSB_YI1_lcc_mcl,lc_CCSB_YI1_lcc_mcl_10,lc_CCSB_YI1_lcc_mcl_25)
as.data.frame(lc_Y2H_uni_lcc_mcl)
lc_Y2_CCSB<-intersection(lc_Y2H_uni_lcc_mcl,lc_CCSB_YI1_lcc_mcl)
as.array(lc_Y2H_uni_lcc_mcl)
lc_Y2_CCSB<-intersection(as.array(lc_Y2H_uni_lcc_mcl),as.array(lc_CCSB_YI1_lcc_mcl))
lc_Y2_CCSB<-intersect(as.array(lc_Y2H_uni_lcc_mcl),as.array(lc_CCSB_YI1_lcc_mcl))
as.array(lc_Y2H_uni_lcc_mcl)
as.array(lc_CCSB_YI1_lcc_mcl)
intersection(lc_CCSB_YI1_lcc_mcl,lc_CCSB_YI1_lcc_mcl_10,lc_CCSB_YI1_lcc_mcl_25)
lc_CCSB_YI1_lcc_mcl$name
lc_Y2_CCSB<-intersect(as.array(lc_Y2H_uni_lcc_mcl$name),as.array(lc_CCSB_YI1_lcc_mcl$name))
head12<-c("lc_Y2H_uni_lcc_mcl","lc_Y2H_uni_lcc_mcl_10","lc_Y2H_uni_lcc_mcl_25","lc_CCSB_YI1_lcc_mcl","lc_CCSB_YI1_lcc_mcl_10","lc_CCSB_YI1_lcc_mcl_25")
tab12<-data.frame(ClusterIn=head12,Size_clusters=c(length(lc_Y2H_uni_lcc_mcl),length(lc_Y2H_uni_lcc_mcl_10),length(lc_Y2H_uni_lcc_mcl_25),length(lc_CCSB_YI1_lcc_mcl),length(lc_CCSB_YI1_lcc_mcl_10),length(lc_CCSB_YI1_lcc_mcl_25)))
View(tab12)
#find largest clusters in Y2h components
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
#print (i)
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]$name
#print (length(thiscluster))
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
print("Largest cluster num:",res)
return(cres)
}
lc_Y2H_uni_lcc_mcl<-findlargestcluster(graph_Y2H_uni_lcc,Y2H_uni_lcc_mcl)
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
#print (i)
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]$name
#print (length(thiscluster))
if(length(thiscluster) > length(cres)){
cres <- thiscluster
res <- i
}
print("Largest cluster num:")
print (res)
return(cres)
}
lc_Y2H_uni_lcc_mcl<-findlargestcluster(graph_Y2H_uni_lcc,Y2H_uni_lcc_mcl)
lc_CCSB_YI1_lcc_mcl<-findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl)
lc_CCSB_YI1_lcc_mcl_10<-findlargestcluster(graph_CCSB_YI1_lcc_10,CCSB_YI1_lcc_mcl_10)
lc_CCSB_YI1_lcc_mcl_25<-findlargestcluster(graph_CCSB_YI1_lcc_25,CCSB_YI1_lcc_mcl_25)
lc_CCSB<-intersection(lc_CCSB_YI1_lcc_mcl,lc_CCSB_YI1_lcc_mcl_10,lc_CCSB_YI1_lcc_mcl_25)
lc_Y2H_uni_lcc_mcl<-findlargestcluster(graph_Y2H_uni_lcc,Y2H_uni_lcc_mcl)
lc_Y2H_uni_lcc_mcl_10<-findlargestcluster(graph_Y2H_uni_lcc_10,Y2H_uni_lcc_mcl_10)
lc_Y2H_uni_lcc_mcl_25<-findlargestcluster(graph_Y2H_uni_lcc_25,Y2H_uni_lcc_mcl_25)
length(lc_Y2H_uni_lcc_mcl_25)
length(lc_Y2H_uni_lcc_mcl)
length(lc_Y2H_uni_lcc_mcl_10)
length(lc_CCSB_YI1_lcc_mcl)
lc_CCSB_YI1_lcc_mcl
findlargestcluster<-function(graph,mcldata){
res<-0
cres<-V(graph)[ which(mcldata$Cluster %in% c(0))]
t<-mcldata$K
for(i in c(0:t))
#print (i)
thiscluster<-V(graph)[ which(mcldata$Cluster %in% c(i))]$name
#print (length(thiscluster))
if(length(thiscluster) >= length(cres)){
cres <- thiscluster
res <- i
}
print("Largest cluster num:")
print (res)
return(cres)
}
lc_Y2H_uni_lcc_mcl<-findlargestcluster(graph_Y2H_uni_lcc,Y2H_uni_lcc_mcl)
lc_CCSB_YI1_lcc_mcl<-findlargestcluster(graph_CCSB_YI1_lcc,CCSB_YI1_lcc_mcl)
lc_CCSB_YI1_lcc_mcl_10<-findlargestcluster(graph_CCSB_YI1_lcc_10,CCSB_YI1_lcc_mcl_10)
lc_CCSB_YI1_lcc_mcl_25<-findlargestcluster(graph_CCSB_YI1_lcc_25,CCSB_YI1_lcc_mcl_25)
lc_Y2H_uni_lcc_mcl_25
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
require(mlbench)
install.packages("mlbench")
require(mlbench)
require(mxnet)
library("DiagrammeR", lib.loc="~/R/win-library/3.4")
require(mxnet)
remove.packages(DiagrammeR)
remove.packages("DiagrammeR")
require(mxnet)
install.packages("DiagrammeR")
require(mxnet)
cran <- getOption("repos")
install.packages(c("httpuv", "lubridate", "openssl", "rentrez", "selectr"))
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
require(mlbench)
require(mxnet)
devtools::install_github('rich-iannone/DiagrammeR')
require(mxnet)
