install.packages("igraph")
library("igraph")
5stargraph <- graph(combn(1:5, 2), directed = FALSE)
plot.igraph(completegraph)
#HW2
library("igraph")
5stargraph <- graph(combn(1:5, 2), directed = FALSE)
plot.igraph(5stargraph)
#HW2
library("igraph")
5stargraph <- graph(combn(1:5, 2), directed = FALSE)
fivestargraph <- graph(combn(1:5, 2), directed = FALSE)
plot.igraph(fivestargraph)
install.packages("rmarkdown")
Sys.which("pdflatex")
#Sol 6:
To check whether these graphs follow the power law distribution we have to check the degree distribution of the graphs and then try to fit them to a power law distribution. We can do this in following steps:
i) First we should get the degree distribution of the graph and plot it on log scale i.e. logk vs log(p(k)) and compare it to a standard power law distribution, as shown in Fig 2d. If our network follows is power law distribution we should see a straight line with negative slope. In figure 2 we see that our graphA and C's distribution is closer to powerlaw. However this method is just for visual inspection. Thus, We use the function *power.law.fit* from igraph package to fit the degree distribution to power law and get statistical p-values to evaluate the fit.
ii) If the degree distribution follows power law we will have $$P(k) \sim k^{-\alpha}$$. *power.law.fit* function reports the parameter of the fitted power law distribution and also reports a p-value. P-value below a confidence level means network is not from a power law distribution, whereas higher p-values indicate in favor of the null i.e. network's degree distribution follows a power law.
Table 6 shows the results obtained from applying *power.law.fit* function to the graphs. The xmin parameter was evaluated by power.law.fit function such that the p-value for Kolmogorov-Smirnov test is largest. From the table we can see that the p-values for all three graphs are greater than 0.05 therefore we fail to reject the null hypothesis at 95% significance. Thus, the given networks follow power law distribution.
library(readxl)
new_list_genes_after_nr <- read_excel("C:/Users/mrbai/Desktop/humandata/new_list_genes_after_nr.xlsx")
View(new_list_genes_after_nr)
t<-table(new_list_genes_after_nr$Chromosome)
t
hist(t)
plot(t)
df <- as.data.frame(t)
View(df)
df[df$Var1 != "CHR",]
df[df$Var1 != "CHR*",]
subset(df, grepl("ADN", Var1))
subset(df, grepl("CHR", Var1))
subset(df, !grepl("CHR", Var1))
df2 <- subset(df, !grepl("CHR", Var1))
plot(df2)
plot(df2)
View(df2)
View(df2$Freq)
plot(df2$Freq)
plot(table(df2$Freq))
pie(df2$Freq)
pie(df2$Freq,labels = df2$Var1)
barplot(df2$Freq)
barplot(df2$Freq,xlab = df2$Var1)
barplot(df2$Freq,legend.text = df2$Var1)
barplot(df2$Freq,names.arg = df2$Var1)
barplot(df2$Freq,names.arg = df2$Var1,col=c(1,2,3,4,5))
barplot(df2$Freq,names.arg = df2$Var1,col=c(1,2,3,4,5,6,7,8,9))
barplot(df2$Freq,names.arg = df2$Var1,col=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15))
barplot(df2$Freq,names.arg = df2$Var1,col=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23))
barplot(sort(df2$Freq),names.arg = df2$Var1,col=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23))
sort(df2)
df2 <- df2[order(Var1),]
View(df2)
df2 <- df2[order("Var1"),]
View(df2)
View(df2)
View(df2)
df2 <- subset(df, !grepl("CHR", Var1))
df2[order("Var1"),]
df2[order(Var1),]
df2[order(Freq),]
df2[order(df2$Freq),]
df2[order(df2$Var1),]
df3<-df2[order(df2$Freq),]
barplot(df3$Freq,names.arg = df3$Var1,col=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23))
barplot(df3$Freq,names.arg = df3$Var1,col=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23),main = "#Orphan transcript by chromosomes")
df3<-df2[order(df2$Freq,decreasing = T),]
barplot(df3$Freq,names.arg = df3$Var1,col=c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23),main = "#Orphan transcript by chromosomes")
install.packages("margrittr")
install.packages("magrittr")
library("magrittr", lib.loc="~/R/win-library/3.4")
require(mlbench)
require(mxnet)
sessionInfo()
install.packages("drat", repos="https://cran.rstudio.com")
drat:::addRepo("dmlc")
install.packages("mxnet")
library("mxnet", lib.loc="~/R/win-library/3.4")
detach("package:mxnet", unload=TRUE)
library("mxnet", lib.loc="~/R/win-library/3.4")
detach("package:mxnet", unload=TRUE)
library("mxnet", lib.loc="~/R/win-library/3.4")
detach("package:mxnet", unload=TRUE)
cran <- getOption("repos")
cran["dmlc"] <- "https://s3.amazonaws.com/mxnet-r/GPU"
options(repos = cran)
install.packages("mxnet")
library("mxnet", lib.loc="~/R/win-library/3.4")
remove.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://s3.amazonaws.com/mxnet-r/GPU"
options(repos = cran)
install.packages("mxnet")
cran <- getOption("repos")
cran["dmlc"] <- "https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/R/CRAN/"
options(repos = cran)
install.packages("mxnet")
library("mxnet", lib.loc="~/R/win-library/3.4")
devtools::install_github("rich-iannone/DiagrammeR")
setwd("D:/courses/sem4/bcb570/hw/hw5")
setwd("D:/courses/sem4/bcb570/hw/hw5")
